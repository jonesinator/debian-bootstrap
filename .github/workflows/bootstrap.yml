name: Test Bootstrap
on:
  push:
    branches:
      - "main"
jobs:
  # Runs the bootstrapping script from the repository, which should be
  # equivalent to deboostrap. The cache of downloaded files and the generated
  # root filesystem are uploaded as artifacts.
  bootstrap:
    runs-on: ubuntu-latest
    steps:
      - name: Get Repository
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Run Bootstrap
        run: |
          cd bootstrap
          docker build --file Containerfile --target bootstrap --tag bootstrap .
          docker run \
            --env keyserver=none \
            --privileged \
            --volume "$(pwd)/cache:/cache" \
            --volume "$(pwd)/rootfs:/debian" \
            bootstrap
          timestamp="$(git log -1 --format=tformat:%cd \
            --date=format:%Y-%m-%dT%H:%M:%SZ "${GITHUB_SHA}")"
          echo "Timestamp: ${timestamp}"
          LC_ALL=C sudo tar --create --gzip --file ../rootfs.tar.gz \
            --directory rootfs --sort name --numeric-owner \
            --mtime "${timestamp}" --clamp-mtime .
          tar --create --gzip --file ../cache.tar.gz cache
      - name: Archive Root Filesystem
        uses: actions/upload-artifact@v4
        with:
          path: rootfs.tar.gz
          name: rootfs.tar.gz
      - name: Archive Cache
        uses: actions/upload-artifact@v4
        with:
          path: cache.tar.gz
          name: cache.tar.gz

  # Runs the bootstrapping script from the repository again, but runs it
  # offline, relying on the cached files downloaded in the previous job. The
  # generated root filesystem is validated to be exactly the same as the one
  # from the previous step.
  bootstrap-offline:
    runs-on: ubuntu-latest
    needs: bootstrap
    steps:
      - name: Get Repository
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Restore Cache
        uses: actions/download-artifact@v4
        with:
          name: cache.tar.gz
      - name: Run Offline Bootstrap
        run: |
          cd bootstrap
          sudo tar --extract --gzip --file ../cache.tar.gz
          docker build --file Containerfile --target bootstrap --tag bootstrap .
          docker run \
            --env keyserver=none \
            --net none \
            --privileged \
            --volume "$(pwd)/cache:/cache:ro" \
            --volume "$(pwd)/rootfs:/debian" \
            bootstrap
          timestamp="$(git log -1 --format=tformat:%cd \
            --date=format:%Y-%m-%dT%H:%M:%SZ "${GITHUB_SHA}")"
          echo "Timestamp: ${timestamp}"
          LC_ALL=C sudo tar --create --gzip --file ../offline.tar.gz \
            --directory rootfs --sort name --numeric-owner \
            --mtime "${timestamp}" --clamp-mtime .
      - name: Get Original Bootstrap Rootfs
        uses: actions/download-artifact@v4
        with:
          name: rootfs.tar.gz
      - name: Ensure Identical Artifacts
        run: |
          sha256sum rootfs.tar.gz offline.tar.gz
          if ! diff rootfs.tar.gz offline.tar.gz; then
            sudo apt-get update
            sudo apt-get install --yes diffoscope
            diffoscope rootfs.tar.gz offline.tar.gz
          fi

  # Runs debootstrap (the "control" in this "experiment"), and uploads the
  # generated root filesystem as an artifact.
  debootstrap:
    runs-on: ubuntu-latest
    needs: bootstrap
    steps:
      - name: Get Repository
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Run debootstrap
        run: |
          cd bootstrap
          docker build --file Containerfile --target debootstrap \
            --tag debootstrap .
          docker run --privileged --volume "$(pwd):/out" debootstrap
          sudo ./cleanup-debootstrap rootfs
          timestamp="$(git log -1 --format=tformat:%cd \
            --date=format:%Y-%m-%dT%H:%M:%SZ "${GITHUB_SHA}")"
          echo "Timestamp: ${timestamp}"
          LC_ALL=C sudo tar --create --gzip --file ../debootstrap.tar.gz \
            --directory rootfs --sort name --numeric-owner \
            --mtime "${timestamp}" --clamp-mtime .
      - name: Get Original Bootstrap Rootfs
        uses: actions/download-artifact@v4
        with:
          name: rootfs.tar.gz
      - name: Ensure Identical Artifacts
        run: |
          sha256sum rootfs.tar.gz debootstrap.tar.gz
          if ! diff rootfs.tar.gz debootstrap.tar.gz; then
            sudo apt-get update
            sudo apt-get install --yes diffoscope
            diffoscope rootfs.tar.gz debootstrap.tar.gz
          fi
