name: test
on:
  push:
    branches:
      - "main"
jobs:

  bootstrap:
    runs-on: ubuntu-latest
    steps:
      - name: Get Repository
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Run Bootstrap
        run: |
          docker build --file Containerfile --target bootstrap --tag bootstrap .
          docker run \
            --env keyserver=none \
            --privileged \
            --volume "$(pwd)/cache:/cache" \
            --volume "$(pwd)/rootfs:/debian" \
            bootstrap
          sudo tar czf bootstrap-rootfs.tar.gz rootfs
          sudo tar czf bootstrap-cache.tar.gz cache
      - name: Archive Root Filesystem
        uses: actions/upload-artifact@v4
        with:
          path: bootstrap-rootfs.tar.gz
          name: bootstrap-rootfs.tar.gz
      - name: Archive Cache
        uses: actions/upload-artifact@v4
        with:
          path: bootstrap-cache.tar.gz
          name: bootstrap-cache.tar.gz

  bootstrap-offline:
    runs-on: ubuntu-latest
    needs: bootstrap
    steps:
      - name: Get Repository
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Get Cache
        uses: actions/download-artifact@v4
        with:
          name: bootstrap-cache.tar.gz
      - name: Run Bootstrap
        run: |
          sudo tar xf bootstrap-cache.tar.gz
          docker build --file Containerfile --target bootstrap --tag bootstrap .
          docker run \
            --env keyserver=none \
            --net none \
            --privileged \
            --volume "$(pwd)/cache:/cache:ro" \
            --volume "$(pwd)/rootfs:/debian" \
            bootstrap
          sudo tar czf bootstrap-offline-rootfs.tar.gz rootfs
      - name: Archive Root Filesystem
        uses: actions/upload-artifact@v4
        with:
          path: bootstrap-offline-rootfs.tar.gz
          name: bootstrap-offline-rootfs.tar.gz

  debootstrap:
    runs-on: ubuntu-latest
    steps:
      - name: Get Repository
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Run debootstrap
        run: |
          docker build --file Containerfile --target debootstrap --tag debootstrap .
          docker run --privileged --volume "$(pwd):/out" debootstrap
          sudo tar czf debootstrap-rootfs.tar.gz rootfs
      - name: Archive Result
        uses: actions/upload-artifact@v4
        with:
          path: debootstrap-rootfs.tar.gz
          name: debootstrap-rootfs.tar.gz

  bootstrap-check:
    runs-on: ubuntu-latest
    needs:
      - bootstrap
      - bootstrap-offline
      - debootstrap
    steps:
      - name: Get Repository
        uses: actions/checkout@v4
      - name: Get Bootstrap Rootfs
        uses: actions/download-artifact@v4
        with:
          name: bootstrap-rootfs.tar.gz
      - name: Get Bootstrap Offline Rootfs
        uses: actions/download-artifact@v4
        with:
          name: bootstrap-offline-rootfs.tar.gz
      - name: Get Debootstrap Rootfs
        uses: actions/download-artifact@v4
        with:
          name: debootstrap-rootfs.tar.gz
      - name: Unpack Artifacts
        run: |
          for artifact in bootstrap-rootfs bootstrap-offline-rootfs debootstrap; do
            mkdir "${artifact}"
            sudo tar xzf "${artifact}.tar.gz" --strip-components 1 --directory "${artifact}"
            sudo ./cleanup "${artifact}.tar.gz" "${artifact}.clean.tar.gz"
          done
          sha256sum *.clean.tar.gz
          sha256sum *.clean.tar.gz | cut -d' ' -f1 | sort | uniq -c
          if [ "$(sha256sum *.clean.tar.gz | cut -d' ' -f1 | sort | uniq -c | cut -d' ' -f1)" -ne 3 ]; then
            echo "Mismatch detected!"
            sha256sum *.clean.tar.gz
            exit 1
          fi

  #pi-gen:
  #  runs-on: ubuntu-latest
  #  steps:
  #    - uses: actions/checkout@v4
  #    - uses: docker/setup-qemu-action@v3
  #    - name: Run pi-gen
  #      run: |
  #        docker build --file Containerfile --target pi-gen --tag pi-gen .
  #        docker run --privileged --volume "$(pwd)/deploy:/pi-gen/deploy" pi-gen
  #        cp deploy/*.zip pi-gen.zip
  #    - name: Archive Result
  #      uses: actions/upload-artifact@v4
  #      with:
  #        path: pi-gen.zip
  #        name: pi-gen.zip
