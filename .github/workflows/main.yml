name: debootstrap-jr
on:
  push:
    branches:
      - main
jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Get Repository
        uses: actions/checkout@v4
      - name: Run Lint
        run: |
          docker build . --target lint --tag lint
          docker run --rm --workdir /src --volume $(pwd):/src:ro lint make ci
  bootstrap:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        distribution:
          - bookworm
          - trixie
        architecture:
          - amd64
          - arm64
          - riscv64
        variant:
          - standard
          - buildd
          - minbase
        protocol:
          - http
          - https
        exclude:
          - distribution: bookworm
            architecture: riscv64
    env:
      prefix: debian-${{ matrix.distribution }}-${{ matrix.architecture }}-${{ matrix.variant }}-${{ matrix.protocol }}
    steps:
      - name: Get Repository
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Run Bootstrap
        run: |
          docker build --target debootstrap-jr --tag debootstrap-jr .
          docker run \
            --env architecture=${{ matrix.architecture }} \
            --env distribution=${{ matrix.distribution }} \
            --env mirror=${{ matrix.protocol }}://deb.debian.org/debian \
            --env variant=${{ matrix.variant }} \
            --privileged \
            --volume "$(pwd)/cache:/cache" \
            --volume "$(pwd)/rootfs:/debian" \
            debootstrap-jr
          timestamp="$(git log -1 --format=tformat:%cd \
            --date=format:%Y-%m-%dTdebootstrap%H:%M:%SZ "${GITHUB_SHA}")"
          LC_ALL=C sudo tar --create --xz --file ${prefix}-rootfs.tar.xz \
            --directory rootfs --sort name --numeric-owner \
            --mtime "${timestamp}" --clamp-mtime .
          tar --create --xz --file ${prefix}-cache.tar.xz cache
      - name: Archive Root Filesystem
        uses: actions/upload-artifact@v4
        with:
          path: ${{ env.prefix }}-rootfs.tar.xz
          name: ${{ env.prefix }}-rootfs.tar.xz
      - name: Archive Cache
        uses: actions/upload-artifact@v4
        with:
          path: ${{ env.prefix }}-cache.tar.xz
          name: ${{ env.prefix }}-cache.tar.xz
  bootstrap-offline:
    runs-on: ubuntu-latest
    needs: bootstrap
    strategy:
      fail-fast: false
      matrix:
        distribution:
          - bookworm
          - trixie
        architecture:
          - amd64
          - arm64
          - riscv64
        variant:
          - standard
          - buildd
          - minbase
        protocol:
          - http
          - https
        exclude:
          - distribution: bookworm
            architecture: riscv64
    env:
      prefix: debian-${{ matrix.distribution }}-${{ matrix.architecture }}-${{ matrix.variant }}-${{ matrix.protocol }}
    steps:
      - name: Get Repository-
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Restore Cache
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.prefix }}-cache.tar.xz
      - name: Run Offline Bootstrap
        run: |
          sudo tar --extract --xz --file ${prefix}-cache.tar.xz
          docker build --target debootstrap-jr --tag debootstrap-jr .
          docker run \
            --env architecture=${{ matrix.architecture }} \
            --env distribution=${{ matrix.distribution }} \
            --env keyserver=none \
            --env mirror=${{ matrix.protocol }}://deb.debian.org/debian \
            --env variant=${{ matrix.variant }} \
            --net none \
            --privileged \
            --volume "$(pwd)/cache:/cache:ro" \
            --volume "$(pwd)/rootfs:/debian" \
            debootstrap-jr
          timestamp="$(git log -1 --format=tformat:%cd \
            --date=format:%Y-%m-%dT%H:%M:%SZ "${GITHUB_SHA}")"
          LC_ALL=C sudo tar --create --xz --file ${prefix}-offline.tar.xz \
            --directory rootfs --sort name --numeric-owner \
            --mtime "${timestamp}" --clamp-mtime .
      - name: Get Original Bootstrap Rootfs
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.prefix }}-rootfs.tar.xz
      - name: Ensure Identical Artifacts
        run: |
          sha256sum ${prefix}-rootfs.tar.xz ${prefix}-offline.tar.xz
          if ! diff ${prefix}-rootfs.tar.xz ${prefix}-offline.tar.xz; then
            sudo apt-get update
            sudo apt-get install --yes diffoscope
            diffoscope ${prefix}-rootfs.tar.xz ${prefix}-offline.tar.xz
          fi
  debootstrap:
    runs-on: ubuntu-latest
    needs: bootstrap
    strategy:
      fail-fast: false
      matrix:
        distribution:
          - bookworm
          - trixie
        architecture:
          - amd64
          - arm64
          - riscv64
        variant:
          - standard
          - buildd
          - minbase
        protocol:
          - http
          - https
        exclude:
          - distribution: bookworm
            architecture: riscv64
    env:
      prefix: debian-${{ matrix.distribution }}-${{ matrix.architecture }}-${{ matrix.variant }}-${{ matrix.protocol }}
    steps:
      - name: Get Repository
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Run debootstrap
        run: |
          docker build --target debootstrap --tag debootstrap .
          case "${{ matrix.variant }}" in
              standard)
                  docker run --privileged --volume "$(pwd):/out" debootstrap \
                      --arch ${{ matrix.architecture }} \
                      ${{ matrix.distribution }} /out/rootfs \
                      ${{ matrix.protocol }}://deb.debian.org/debian \
                  ;;
              buildd)
                  docker run --privileged --volume "$(pwd):/out" debootstrap \
                      --arch ${{ matrix.architecture }} \
                      --variant=buildd  \
                      --merged-usr \
                      ${{ matrix.distribution }} /out/rootfs \
                      ${{ matrix.protocol }}://deb.debian.org/debian \
                      ;;
              minbase)
                  docker run --privileged --volume "$(pwd):/out" debootstrap \
                      --arch ${{ matrix.architecture }} \
                      --variant=minbase \
                      ${{ matrix.distribution }} /out/rootfs \
                      ${{ matrix.protocol }}://deb.debian.org/debian \
                      ;;
              *) echo "Bad variant." && exit 1 ;;
          esac
          sudo ./strip-debootstrap rootfs
          timestamp="$(git log -1 --format=tformat:%cd \
            --date=format:%Y-%m-%dT%H:%M:%SZ "${GITHUB_SHA}")"
          LC_ALL=C sudo tar --create --xz --file ${prefix}-orig.tar.xz \
            --directory rootfs --sort name --numeric-owner \
            --mtime "${timestamp}" --clamp-mtime .
      - name: Get Original Bootstrap Rootfs
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.prefix }}-rootfs.tar.xz
      - name: Ensure Identical Artifacts
        run: |
          sha256sum ${prefix}-rootfs.tar.xz ${prefix}-orig.tar.xz
          if ! diff ${prefix}-rootfs.tar.xz ${prefix}-orig.tar.xz; then
            sudo apt-get update
            sudo apt-get install --yes diffoscope
            diffoscope ${prefix}-rootfs.tar.xz ${prefix}-orig.tar.xz
          fi
  attestation:
    runs-on: ubuntu-latest
    needs:
      - lint
      - bootstrap
      - bootstrap-offline
      - debootstrap
    permissions:
      id-token: write
      attestations: write
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: artifacts
          merge-multiple: true
      - name: Attest
        uses: actions/attest-build-provenance@v1
        with:
          subject-path: artifacts/*
