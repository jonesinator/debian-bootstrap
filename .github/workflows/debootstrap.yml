name: Test Debian Bootstrap
on:
  push:
    branches:
      - main
    paths:
      - bootstrap/**
      - .github/workflows/debootstrap.yml
jobs:
  bootstrap:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        distribution:
          - bookworm
          - trixie
        architecture:
          - amd64
          - arm64
          - riscv64
        variant:
          - standard
          - buildd
          - minbase
        protocol:
          - http
          - https
        exclude:
          - distribution: bookworm
            architecture: riscv64
    env:
      prefix: debian-${{ matrix.distribution }}-${{ matrix.architecture }}-${{ matrix.variant }}-${{ matrix.protocol }}
    steps:
      - name: Get Repository
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Run Bootstrap
        run: |
          cd bootstrap
          docker build --file Containerfile --target bootstrap --tag bootstrap .
          docker run \
            --env architecture=${{ matrix.architecture }} \
            --env distribution=${{ matrix.distribution }} \
            --env mirror=${{ matrix.protocol }}://deb.debian.org/debian \
            --env variant=${{ matrix.variant }} \
            --privileged \
            --volume "$(pwd)/cache:/cache" \
            --volume "$(pwd)/rootfs:/debian" \
            bootstrap
          timestamp="$(git log -1 --format=tformat:%cd \
            --date=format:%Y-%m-%dT%H:%M:%SZ "${GITHUB_SHA}")"
          LC_ALL=C sudo tar --create --xz --file ../${prefix}-rootfs.tar.xz \
            --directory rootfs --sort name --numeric-owner \
            --mtime "${timestamp}" --clamp-mtime .
          tar --create --xz --file ../${prefix}-cache.tar.xz cache
      - name: Archive Root Filesystem
        uses: actions/upload-artifact@v4
        with:
          path: ${{ env.prefix }}-rootfs.tar.xz
          name: ${{ env.prefix }}-rootfs.tar.xz
      - name: Archive Cache
        uses: actions/upload-artifact@v4
        with:
          path: ${{ env.prefix }}-cache.tar.xz
          name: ${{ env.prefix }}-cache.tar.xz
  #  bootstrap-offline:
  #    runs-on: ubuntu-latest
  #    needs: bootstrap
  #    strategy:
  #      matrix:
  #        distribution:
  #          - bookworm
  #          - trixie
  #        architecture:
  #          - amd64
  #          - arm64
  #          - riscv64
  #        variant:
  #          - standard
  #          - buildd
  #          - minbase
  #        protocol:
  #          - http
  #          - https
  #        exclude:
  #          - distribution: bookworm
  #            architecture: riscv64
  #    env:
  #      prefix: debian-${{ matrix.distribution }}-${{ matrix.architecture }}-${{ matrix.variant }}-${{ matrix.protocol }}
  #    steps:
  #      - name: Get Repository
  #        uses: actions/checkout@v4
  #      - name: Set up QEMU
  #        uses: docker/setup-qemu-action@v3
  #      - name: Restore Cache
  #        uses: actions/download-artifact@v4
  #        with:
  #          name: cache-${{ matrix.protocol }}-${{ matrix.variant }}-${{ matrix.architecture }}.tar.xz
  #      - name: Run Offline Bootstrap
  #        run: |
  #          cd bootstrap
  #          sudo tar --extract --xz --file ../cache-${{ matrix.protocol }}-${{ matrix.variant }}-${{ matrix.architecture }}.tar.xz
  #          docker build --file Containerfile --target bootstrap --tag bootstrap .
  #          docker run \
  #            --env architecture=${{ matrix.architecture }} \
  #            --env keyserver=none \
  #            --env mirror=${{ matrix.protocol }}://deb.debian.org/debian \
  #            --env variant=${{ matrix.variant }} \
  #            --net none \
  #            --privileged \
  #            --volume "$(pwd)/cache:/cache:ro" \
  #            --volume "$(pwd)/rootfs:/debian" \
  #            bootstrap
  #          timestamp="$(git log -1 --format=tformat:%cd \
  #            --date=format:%Y-%m-%dT%H:%M:%SZ "${GITHUB_SHA}")"
  #          LC_ALL=C sudo tar --create --xz --file ../offline-${{ matrix.protocol }}-${{ matrix.variant }}-${{ matrix.architecture }}.tar.xz \
  #            --directory rootfs --sort name --numeric-owner \
  #            --mtime "${timestamp}" --clamp-mtime .
  #      - name: Get Original Bootstrap Rootfs
  #        uses: actions/download-artifact@v4
  #        with:
  #          name: rootfs-${{ matrix.protocol }}-${{ matrix.variant }}-${{ matrix.architecture }}.tar.xz
  #      - name: Ensure Identical Artifacts
  #        run: |
  #          sha256sum rootfs-${{ matrix.protocol }}-${{ matrix.variant }}-${{ matrix.architecture }}.tar.xz offline-${{ matrix.protocol }}-${{ matrix.variant }}-${{ matrix.architecture }}.tar.xz
  #          if ! diff rootfs-${{ matrix.protocol }}-${{ matrix.variant }}-${{ matrix.architecture }}.tar.xz offline-${{ matrix.protocol }}-${{ matrix.variant }}-${{ matrix.architecture }}.tar.xz; then
  #            sudo apt-get update
  #            sudo apt-get install --yes diffoscope
  #            diffoscope rootfs-${{ matrix.protocol }}-${{ matrix.variant }}-${{ matrix.architecture }}.tar.xz offline-${{ matrix.protocol }}-${{ matrix.variant }}-${{ matrix.architecture }}.tar.xz
  #          fi
  #  debootstrap:
  #    runs-on: ubuntu-latest
  #    needs: bootstrap
  #    strategy:
  #      matrix:
  #        distribution:
  #          - bookworm
  #          - trixie
  #        architecture:
  #          - amd64
  #          - arm64
  #          - riscv64
  #        variant:
  #          - standard
  #          - buildd
  #          - minbase
  #        protocol:
  #          - http
  #          - https
  #        exclude:
  #          - distribution: bookworm
  #            architecture: riscv64
  #    env:
  #      prefix: debian-${{ matrix.distribution }}-${{ matrix.architecture }}-${{ matrix.variant }}-${{ matrix.protocol }}
  #    steps:
  #      - name: Get Repository
  #        uses: actions/checkout@v4
  #      - name: Set up QEMU
  #        uses: docker/setup-qemu-action@v3
  #      - name: Run debootstrap
  #        run: |
  #          cd bootstrap
  #          docker build --file Containerfile --target debootstrap \
  #            --tag debootstrap .
  #          case "${{ matrix.variant }}" in
  #              standard) docker run --privileged --volume "$(pwd):/out" debootstrap --arch ${{ matrix.architecture }}                                bookworm /out/rootfs ${{ matrix.protocol }}://deb.debian.org/debian ;;
  #              buildd)   docker run --privileged --volume "$(pwd):/out" debootstrap --arch ${{ matrix.architecture }} --merged-usr --variant=buildd  bookworm /out/rootfs ${{ matrix.protocol }}://deb.debian.org/debian ;;
  #              minbase)  docker run --privileged --volume "$(pwd):/out" debootstrap --arch ${{ matrix.architecture }}              --variant=minbase bookworm /out/rootfs ${{ matrix.protocol }}://deb.debian.org/debian ;;
  #              *) echo "Bad variant." && exit 1 ;;
  #          esac
  #          sudo ./cleanup-debootstrap rootfs
  #          timestamp="$(git log -1 --format=tformat:%cd \
  #            --date=format:%Y-%m-%dT%H:%M:%SZ "${GITHUB_SHA}")"
  #          LC_ALL=C sudo tar --create --xz --file ../debootstrap-${{ matrix.protocol }}-${{ matrix.variant }}-${{ matrix.architecture }}.tar.xz \
  #            --directory rootfs --sort name --numeric-owner \
  #            --mtime "${timestamp}" --clamp-mtime .
  #      - name: Get Original Bootstrap Rootfs
  #        uses: actions/download-artifact@v4
  #        with:
  #          name: rootfs-${{ matrix.protocol }}-${{ matrix.variant }}-${{ matrix.architecture }}.tar.xz
  #      - name: Ensure Identical Artifacts
  #        run: |
  #          sha256sum rootfs-${{ matrix.protocol }}-${{ matrix.variant }}-${{ matrix.architecture }}.tar.xz debootstrap-${{ matrix.protocol }}-${{ matrix.variant }}-${{ matrix.architecture }}.tar.xz
  #          if ! diff rootfs-${{ matrix.protocol }}-${{ matrix.variant }}-${{ matrix.architecture }}.tar.xz debootstrap-${{ matrix.protocol }}-${{ matrix.variant }}-${{ matrix.architecture }}.tar.xz; then
  #            sudo apt-get update
  #            sudo apt-get install --yes diffoscope
  #            diffoscope rootfs-${{ matrix.protocol }}-${{ matrix.variant }}-${{ matrix.architecture }}.tar.xz debootstrap-${{ matrix.protocol }}-${{ matrix.variant }}-${{ matrix.architecture }}.tar.xz
  #          fi

  # SKIP FOR NOW
  #attestation:
  #  runs-on: ubuntu-latest
  #  needs:
  #    - bootstrap-offline
  #    - debootstrap
  #  permissions:
  #    id-token: write
  #    attestations: write
  #  steps:
  #    - uses: actions/download-artifact@v4
  #      with:
  #        path: artifacts
  #        merge-multiple: true
  #    - name: Attest
  #      uses: actions/attest-build-provenance@v1
  #      with:
  #        subject-path: artifacts/*
  #build-deps:
  #  runs-on: ubuntu-latest
  #  needs:
  #    - attestation
  #  steps:
  #    - name: Get Repository
  #      uses: actions/checkout@v4
  #    - name: Set up QEMU
  #      uses: docker/setup-qemu-action@v3
  #    - name: Restore Rootfs
  #      uses: actions/download-artifact@v4
  #      with:
  #        name: rootfs.tar.xz
  #    - name: Restore Cache
  #      uses: actions/download-artifact@v4
  #      with:
  #        name: cache.tar.xz
  #    - name: Run Build Deps
  #      run: |
  #        cd bootstrap
  #        sudo tar --extract --xz --file ../cache.tar.xz
  #        mkdir rootfs
  #        sudo tar --extract --xz --file ../rootfs.tar.xz --directory rootfs
  #        sudo ./build-deps
  #        echo "Pack build-rootfs.tar.xz"
  #        timestamp="$(git log -1 --format=tformat:%cd \
  #          --date=format:%Y-%m-%dT%H:%M:%SZ "${GITHUB_SHA}")"
  #        LC_ALL=C sudo tar --create --xz --file ../build-rootfs.tar.xz \
  #          --directory rootfs --sort name --numeric-owner \
  #          --mtime "${timestamp}" --clamp-mtime .
  #        echo "Pack build-deps-cache.tar"
  #        find $(find cache -type d -name pool) -mindepth 2 -maxdepth 2 -type d | while read -r mirror_dir; do
  #            echo "Archiving directory $mirror_dir"
  #            tar --append --file ../build-deps-cache.tar "$mirror_dir"
  #            sudo rm -rf "$mirror_dir"
  #        done
  #    - name: Archive Package List
  #      uses: actions/upload-artifact@v4
  #      with:
  #        path: bootstrap/all-packages
  #        name: all-packages
  #    - name: Archive Builder Root Filesystem
  #      uses: actions/upload-artifact@v4
  #      with:
  #        path: build-rootfs.tar.xz
  #        name: build-rootfs.tar.xz
  #    - name: Archive Build Dependencies Cache
  #      uses: actions/upload-artifact@v4
  #      with:
  #        path: build-deps-cache.tar
  #        name: build-deps-cache.tar
