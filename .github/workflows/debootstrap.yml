# Runs the bootstrapping script from the repository in a very minimal
# containerized environment. The cache of downloaded files as an xz tarball, the
# generated root filesystem as an xz tarball, and the timestamp used to limit
# the timestamps in the root filesystem as a plain text file are uploaded as
# artifacts. The cache and the timestamp should be sufficient to recreate the
# root filesystem offline. Further, the root filesystem generated by this
# bootstrapping script is designed to be identical to the output of the
# "debootstrap" script -- modulo a small set of files removed/touched by a
# cleanup script. We run both the offline build and the debootstrap builds and
# ensure they do indeed reproduce the output of the original run. If both builds
# reproduce the original successfully, we have GitHub sign an attestation over
# all of the artifacts generated by the first job.
name: Test Debian Bootstrap
on:
  push:
    branches:
      - main
    paths:
      - bootstrap/**
      - .github/workflows/debootstrap.yml
jobs:
  bootstrap:
    runs-on: ubuntu-latest
    steps:
      - name: Get Repository
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Run Bootstrap
        run: |
          cd bootstrap
          docker build --file Containerfile --target bootstrap --tag bootstrap .
          docker run \
            --env keyserver=none \
            --privileged \
            --volume "$(pwd)/cache:/cache" \
            --volume "$(pwd)/rootfs:/debian" \
            bootstrap
          timestamp="$(git log -1 --format=tformat:%cd \
            --date=format:%Y-%m-%dT%H:%M:%SZ "${GITHUB_SHA}")"
          echo "${timestamp}" > ../clamp-mtime
          LC_ALL=C sudo tar --create --xz --file ../rootfs.tar.xz \
            --directory rootfs --sort name --numeric-owner \
            --mtime "${timestamp}" --clamp-mtime .
          tar --create --xz --file ../cache.tar.xz cache
      - name: Archive Root Filesystem
        uses: actions/upload-artifact@v4
        with:
          path: rootfs.tar.xz
          name: rootfs.tar.xz
      - name: Archive Cache
        uses: actions/upload-artifact@v4
        with:
          path: cache.tar.xz
          name: cache.tar.xz
      - name: Archive Commit Timestamp
        uses: actions/upload-artifact@v4
        with:
          path: clamp-mtime
          name: clamp-mtime
  bootstrap-offline:
    runs-on: ubuntu-latest
    needs: bootstrap
    steps:
      - name: Get Repository
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Restore Cache
        uses: actions/download-artifact@v4
        with:
          name: cache.tar.xz
      - name: Run Offline Bootstrap
        run: |
          cd bootstrap
          sudo tar --extract --xz --file ../cache.tar.xz
          docker build --file Containerfile --target bootstrap --tag bootstrap .
          docker run \
            --env keyserver=none \
            --net none \
            --privileged \
            --volume "$(pwd)/cache:/cache:ro" \
            --volume "$(pwd)/rootfs:/debian" \
            bootstrap
          timestamp="$(git log -1 --format=tformat:%cd \
            --date=format:%Y-%m-%dT%H:%M:%SZ "${GITHUB_SHA}")"
          echo "Timestamp: ${timestamp}"
          LC_ALL=C sudo tar --create --xz --file ../offline.tar.xz \
            --directory rootfs --sort name --numeric-owner \
            --mtime "${timestamp}" --clamp-mtime .
      - name: Get Original Bootstrap Rootfs
        uses: actions/download-artifact@v4
        with:
          name: rootfs.tar.xz
      - name: Ensure Identical Artifacts
        run: |
          sha256sum rootfs.tar.xz offline.tar.xz
          if ! diff rootfs.tar.xz offline.tar.xz; then
            sudo apt-get update
            sudo apt-get install --yes diffoscope
            diffoscope rootfs.tar.xz offline.tar.xz
          fi
  debootstrap:
    runs-on: ubuntu-latest
    needs: bootstrap
    steps:
      - name: Get Repository
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Run debootstrap
        run: |
          cd bootstrap
          docker build --file Containerfile --target debootstrap \
            --tag debootstrap .
          docker run --privileged --volume "$(pwd):/out" debootstrap
          sudo ./cleanup-debootstrap rootfs
          timestamp="$(git log -1 --format=tformat:%cd \
            --date=format:%Y-%m-%dT%H:%M:%SZ "${GITHUB_SHA}")"
          echo "Timestamp: ${timestamp}"
          LC_ALL=C sudo tar --create --xz --file ../debootstrap.tar.xz \
            --directory rootfs --sort name --numeric-owner \
            --mtime "${timestamp}" --clamp-mtime .
      - name: Get Original Bootstrap Rootfs
        uses: actions/download-artifact@v4
        with:
          name: rootfs.tar.xz
      - name: Ensure Identical Artifacts
        run: |
          sha256sum rootfs.tar.xz debootstrap.tar.xz
          if ! diff rootfs.tar.xz debootstrap.tar.xz; then
            sudo apt-get update
            sudo apt-get install --yes diffoscope
            diffoscope rootfs.tar.xz debootstrap.tar.xz
          fi
  # SKIP FOR NOW
  #attestation:
  #  runs-on: ubuntu-latest
  #  needs:
  #    - bootstrap-offline
  #    - debootstrap
  #  permissions:
  #    id-token: write
  #    attestations: write
  #  steps:
  #    - uses: actions/download-artifact@v4
  #      with:
  #        path: artifacts
  #        merge-multiple: true
  #    - name: Attest
  #      uses: actions/attest-build-provenance@v1
  #      with:
  #        subject-path: artifacts/*
  #build-deps:
  #  runs-on: ubuntu-latest
  #  needs:
  #    - attestation
  #  steps:
  #    - name: Get Repository
  #      uses: actions/checkout@v4
  #    - name: Set up QEMU
  #      uses: docker/setup-qemu-action@v3
  #    - name: Restore Rootfs
  #      uses: actions/download-artifact@v4
  #      with:
  #        name: rootfs.tar.xz
  #    - name: Restore Cache
  #      uses: actions/download-artifact@v4
  #      with:
  #        name: cache.tar.xz
  #    - name: Run Build Deps
  #      run: |
  #        cd bootstrap
  #        sudo tar --extract --xz --file ../cache.tar.xz
  #        mkdir rootfs
  #        sudo tar --extract --xz --file ../rootfs.tar.xz --directory rootfs
  #        sudo ./build-deps
  #        echo "Pack build-rootfs.tar.xz"
  #        timestamp="$(git log -1 --format=tformat:%cd \
  #          --date=format:%Y-%m-%dT%H:%M:%SZ "${GITHUB_SHA}")"
  #        LC_ALL=C sudo tar --create --xz --file ../build-rootfs.tar.xz \
  #          --directory rootfs --sort name --numeric-owner \
  #          --mtime "${timestamp}" --clamp-mtime .
  #        echo "Pack build-deps-cache.tar"
  #        find $(find cache -type d -name pool) -mindepth 2 -maxdepth 2 -type d | while read -r mirror_dir; do
  #            echo "Archiving directory $mirror_dir"
  #            tar --append --file ../build-deps-cache.tar "$mirror_dir"
  #            sudo rm -rf "$mirror_dir"
  #        done
  #    - name: Archive Package List
  #      uses: actions/upload-artifact@v4
  #      with:
  #        path: bootstrap/all-packages
  #        name: all-packages
  #    - name: Archive Builder Root Filesystem
  #      uses: actions/upload-artifact@v4
  #      with:
  #        path: build-rootfs.tar.xz
  #        name: build-rootfs.tar.xz
  #    - name: Archive Build Dependencies Cache
  #      uses: actions/upload-artifact@v4
  #      with:
  #        path: build-deps-cache.tar
  #        name: build-deps-cache.tar
